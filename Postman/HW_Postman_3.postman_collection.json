{
	"info": {
		"_postman_id": "fc6fc987-2377-4af0-80cf-48f0672b3838",
		"name": "HW_Postman_3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"console.log(jsonData.token);\r",
							"\r",
							"pm.environment.set(\"token\",jsonData.token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "kljfhdkfg",
							"type": "default"
						},
						{
							"key": "password",
							"value": "jkdfkjsdfks",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/login",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//  Проверить статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверка структуры json в ответе.\r",
							"\r",
							"var schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"person\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"u_age\": {\r",
							"          \"type\": \"number\"\r",
							"        }/*u_age*/,\r",
							"        \"u_name\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"number\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"number\"\r",
							"            }\r",
							"          ]\r",
							"        }/*u_name*/,\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"number\"\r",
							"        }/*u_salary_1.5_year*/\r",
							"      }/*properties person*/,\r",
							"      \"required\": [\r",
							"        \"u_age\",\r",
							"        \"u_name\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]/*required peson*/\r",
							"    }/*person*/,\r",
							"    \"qa_salary_after_12_months\": {\r",
							"      \"type\": \"number\"\r",
							"    }/*qa_salary_after_12_months*/,\r",
							"    \"qa_salary_after_6_months\": {\r",
							"      \"type\": \"number\"\r",
							"    }/*qa_salary_after_6_months*/,\r",
							"    \"start_qa_salary\": {\r",
							"      \"type\": \"number\"\r",
							"    }/*start_qa_salary*/\r",
							"  }/*properties object*/,\r",
							"  \"required\": [\r",
							"    \"person\",\r",
							"    \"qa_salary_after_12_months\",\r",
							"    \"qa_salary_after_6_months\",\r",
							"    \"start_qa_salary\"\r",
							"  ]/*required object*/\r",
							"}/*schema*/\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(jsonData, schema,true,true)).to.be.true;\r",
							"});\r",
							"\r",
							"//В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент\r",
							"var req = JSON.parse(request.data);\r",
							"var sal = +req.salary \r",
							"\r",
							"pm.test(\"Test qa_salary_after_6_months * 2\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(sal*2);\r",
							"});\r",
							"\r",
							"pm.test(\"Test qa_salary_after_12_months * 2.9\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(sal*2.9);\r",
							"});\r",
							"\r",
							"pm.test(\"Test u_salary_1.5_year * 4\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_1_5_year).to.eql(sal * 4);\r",
							"});\r",
							"// Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
							"pm.environment.set(\"u_salary_1_5_year\", jsonData.person.u_salary_1_5_year);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\": \"{{age}}\",\r\n    \"name\": \"{{name}}\",\r\n    \"salary\": \"{{salary}}\",\r\n    \"auth_token\":\"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Проверка структуры json в ответе.\r",
							"var schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"name\": {\r",
							"      \"type\": \"string\",\r",
							"        },\r",
							"          \"age\":{\r",
							"            \"type\":\"number\"\r",
							"          },\r",
							"            \"salary\":{\r",
							"              \"type\":\"array\",\r",
							"              \"items\":[\r",
							"                {\"type\":\"number\"},\r",
							"                {\"type\":\"string\"},\r",
							"                {\"type\":\"string\"}\r",
							"              ]\r",
							"            }\r",
							"    },\r",
							"      \"required\":[\r",
							"        \"name\",\r",
							"        \"age\",\r",
							"        \"salary\"\r",
							"      ]\r",
							"}\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test('Schema is valid', function() {\r",
							"    pm.expect(tv4.validate(jsonData,schema,true,true)).to.be.true;\r",
							"});\r",
							"// В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент\r",
							"\r",
							"var req = request.data;\r",
							"var sal = +req.salary;\r",
							"\r",
							"pm.test('Test salary*2', function() {\r",
							"    pm.expect(+jsonData.salary[1]).to.eql(sal*2)\r",
							"});\r",
							"\r",
							"pm.test('Test salary*3', function() {\r",
							"    pm.expect(+jsonData.salary[2]).to.eql(sal*3)\r",
							"});\r",
							"// Проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"\r",
							"pm.test('Test compare items (2>1)', function() {\r",
							"    pm.expect(+jsonData.salary[2]).to.above(+jsonData.salary[1])\r",
							"});\r",
							"\r",
							"pm.test('Test compare items(2>0)', function() {\r",
							"    pm.expect(+jsonData.salary[2]).to.above(jsonData.salary[0])\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "default"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "default"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/new_data",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверка структуры json в ответе.\r",
							"var schema = {\r",
							"  \"type\":\"object\",\r",
							"    \"properties\":{\r",
							"      \"name\":{\r",
							"        \"type\":\"string\"\r",
							"      },//name\r",
							"        \"age\":{\r",
							"          \"type\":\"number\"\r",
							"        },//age\r",
							"          \"daily_food\":{\r",
							"            \"type\":\"number\"\r",
							"          },//daily_food\r",
							"            \"daily_sleep\":{\r",
							"              \"type\":\"number\"\r",
							"            }//daily_sleep\r",
							"    },//properties\r",
							"\t\t\"required\":[\r",
							"          \"name\",\r",
							"          \"age\",\r",
							"          \"daily_food\",\r",
							"          \"daily_sleep\"\r",
							"        ]\r",
							"\r",
							"}\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test('Schema is value', function() {\r",
							"    pm.expect(tv4.validate(jsonData,schema,true,true)).to.be.true\r",
							"});\r",
							"\r",
							"// В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"var req = request.data;\r",
							"var weight = req.weight;\r",
							"\r",
							"pm.test('Test colculate daily_food', function() {\r",
							"    pm.expect(jsonData.daily_food).to.eql(weight*0.012)\r",
							"});\r",
							"\r",
							"pm.test('Test colculate daily_sleep', function() {\r",
							"    pm.expect(jsonData.daily_sleep).to.eql(weight*2.5)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "5",
							"type": "default"
						},
						{
							"key": "weight",
							"value": "13",
							"type": "default"
						},
						{
							"key": "name",
							"value": "Lucky",
							"type": "default"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/test_pet_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверка структуры json в ответе.\r",
							"\r",
							"var schema = {\r",
							" \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\":\"object\",\r",
							"    \"properties\":{\r",
							"      \"name\":{\r",
							"        \"type\":\"string\"\r",
							"      },//name\r",
							"        \"age\":{\r",
							"          \"type\":\"string\"\r",
							"        },//age\r",
							"          \"salary\":{\r",
							"            \"type\":\"number\"\r",
							"          },//salary\r",
							"            \"family\":{\r",
							"              \"type\":\"object\",\r",
							"                \"properties\":{\r",
							"                   \"children\":{\r",
							"                     \"type\":\"array\",\r",
							"                       \"items\":[\r",
							"                         {\"type\":\"array\",\r",
							"                          \"items\":[\r",
							"                            {\"type\":\"string\"},\r",
							"                            {\"type\":\"number\"}\r",
							"                          ]\r",
							"                         },\r",
							"                         {\"type\":\"array\",\r",
							"                          \"items\":[\r",
							"                            {\"type\":\"string\"},\r",
							"                            {\"type\":\"number\"}\r",
							"                          ]\r",
							"                         }\r",
							"                       ]\r",
							"                   },//children\r",
							"                     \"u_salary_1_5_year\":{\r",
							"                       \"type\":\"number\"\r",
							"                     }//u_salary_1.5_year\r",
							"                },//properties family\r",
							"                  \"required\":[\r",
							"                    \"children\",\r",
							"                    \"u_salary_1_5_year\"\r",
							"                  ]\r",
							"            }//family\r",
							"    },//properties\r",
							"\t\t\"required\":[\r",
							"          \"name\",\r",
							"          \"age\",\r",
							"          \"salary\",\r",
							"          \"family\"\r",
							"        ]\r",
							"\r",
							"}\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test('Schema is valid', function() {\r",
							"    pm.expect(tv4.validate(jsonData,schema,true,true)).to.be.true\r",
							"});\r",
							"\r",
							"// Проверить что занчение поля name = значению переменной name из окружения\r",
							"var name = pm.environment.get(\"name\");\r",
							"\r",
							"pm.test('Test compare name', function() {\r",
							"    pm.expect(jsonData.name).to.eql(name)\r",
							"});\r",
							"\r",
							"// Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							"var req = request.data;\r",
							"\r",
							"pm.test('Test compare name', function() {\r",
							"    pm.expect(jsonData.age).to.eql(req.age)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "40",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "{{u_salary_1_5_year}}",
							"type": "default"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "default"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/get_test_user",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		}
	]
}